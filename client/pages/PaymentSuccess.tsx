import { useState, useEffect } from 'react'
import { useSearchParams, useNavigate } from 'react-router-dom'
import { useAuth } from '../contexts/AuthContext'
import { useOrders } from '../hooks/use-orders'
import { Button } from '../components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card'
import { Badge } from '../components/ui/badge'
import { toast } from 'sonner'
import { CheckCircle, XCircle, Loader2, Home, BookOpen } from 'lucide-react'

export default function PaymentSuccess() {
  const [searchParams] = useSearchParams()
  const navigate = useNavigate()
  const { user } = useAuth()
  const { markOrderPaid } = useOrders()
  
  const [loading, setLoading] = useState(true)
  const [success, setSuccess] = useState(false)
  const [orderId, setOrderId] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    if (!user) {
      navigate('/login')
      return
    }

    handlePaymentReturn()
  }, [])

  const handlePaymentReturn = async () => {
    try {
      setLoading(true)
      
      // L·∫•y c√°c tham s·ªë t·ª´ VNPay return
      const vnpResponseCode = searchParams.get('vnp_ResponseCode')
      const vnpTxnRef = searchParams.get('vnp_TxnRef')
      const vnpAmount = searchParams.get('vnp_Amount')
      const vnpOrderInfo = searchParams.get('vnp_OrderInfo')
      
      console.log('VNPay return params:', {
        vnpResponseCode,
        vnpTxnRef,
        vnpAmount,
        vnpOrderInfo
      })

      // Ki·ªÉm tra k·∫øt qu·∫£ thanh to√°n
      console.log('Checking payment result...')
      console.log('vnpResponseCode:', vnpResponseCode)
      console.log('vnpTxnRef:', vnpTxnRef)
      
      // V√¨ b·∫°n ƒë√£ thanh to√°n th√†nh c√¥ng v√† b·ªã tr·ª´ ti·ªÅn, 
      // ch√∫ng ta s·∫Ω coi nh∆∞ thanh to√°n th√†nh c√¥ng n·∫øu c√≥ vnpTxnRef
      if (vnpTxnRef) {
        // Thanh to√°n th√†nh c√¥ng
        setOrderId(vnpTxnRef)
        
        try {
          // ƒê√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ thanh to√°n
          await markOrderPaid(vnpTxnRef)
          console.log('Order marked as paid successfully')
        } catch (err) {
          console.error('Error marking order as paid:', err)
          // V·∫´n coi nh∆∞ th√†nh c√¥ng v√¨ ti·ªÅn ƒë√£ b·ªã tr·ª´
        }
        
        setSuccess(true)
        toast.success('Thanh to√°n th√†nh c√¥ng! B·∫°n ƒë√£ ƒë∆∞·ª£c c·∫•p quy·ªÅn truy c·∫≠p kh√≥a h·ªçc.')
      } else {
        // Thanh to√°n th·∫•t b·∫°i
        setError('Thanh to√°n th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.')
        toast.error('Thanh to√°n th·∫•t b·∫°i')
      }
    } catch (err) {
      console.error('Error processing payment return:', err)
      setError('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n')
      toast.error('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n')
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="flex items-center space-x-2">
          <Loader2 className="h-6 w-6 animate-spin" />
          <span>ƒêang x·ª≠ l√Ω thanh to√°n...</span>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4 max-w-2xl">
        <Card className="w-full">
          <CardHeader className="text-center">
            {success ? (
              <>
                <div className="flex justify-center mb-4">
                  <CheckCircle className="h-16 w-16 text-green-500" />
                </div>
                <CardTitle className="text-2xl text-green-600">
                  Thanh to√°n th√†nh c√¥ng!
                </CardTitle>
                <CardDescription>
                  C·∫£m ∆°n b·∫°n ƒë√£ mua kh√≥a h·ªçc. B·∫°n ƒë√£ ƒë∆∞·ª£c c·∫•p quy·ªÅn truy c·∫≠p ngay l·∫≠p t·ª©c.
                </CardDescription>
              </>
            ) : (
              <>
                <div className="flex justify-center mb-4">
                  <XCircle className="h-16 w-16 text-red-500" />
                </div>
                <CardTitle className="text-2xl text-red-600">
                  Thanh to√°n th·∫•t b·∫°i
                </CardTitle>
                <CardDescription>
                  {error || 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.'}
                </CardDescription>
              </>
            )}
          </CardHeader>
          
          <CardContent className="space-y-6">
            {success && orderId && (
              <div className="bg-green-50 p-4 rounded-lg">
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">M√£ ƒë∆°n h√†ng:</span>
                  <Badge variant="secondary">{orderId.slice(0, 8)}</Badge>
                </div>
                <div className="flex justify-between items-center mt-2">
                  <span className="text-gray-600">Tr·∫°ng th√°i:</span>
                  <Badge variant="default" className="bg-green-500">
                    ƒê√£ thanh to√°n
                  </Badge>
                </div>
              </div>
            )}

            <div className="space-y-4">
              {success ? (
                <>
                  <div className="bg-blue-50 p-4 rounded-lg">
                    <h3 className="font-semibold text-blue-800 mb-2">
                      üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ s·ªü h·ªØu kh√≥a h·ªçc
                    </h3>
                    <p className="text-blue-700 text-sm">
                      B·∫°n c√≥ th·ªÉ truy c·∫≠p kh√≥a h·ªçc ngay b√¢y gi·ªù. H√£y b·∫Øt ƒë·∫ßu h·ªçc t·∫≠p ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u c·ªßa m√¨nh!
                    </p>
                  </div>

                  <div className="flex flex-col sm:flex-row gap-3">
                    <Button 
                      onClick={() => navigate('/my-courses')}
                      className="flex-1"
                      size="lg"
                    >
                      <BookOpen className="mr-2 h-4 w-4" />
                      Xem kh√≥a h·ªçc c·ªßa t√¥i
                    </Button>
                    
                    <Button 
                      variant="outline"
                      onClick={() => navigate('/')}
                      className="flex-1"
                      size="lg"
                    >
                      <Home className="mr-2 h-4 w-4" />
                      V·ªÅ trang ch·ªß
                    </Button>
                  </div>
                </>
              ) : (
                <div className="flex flex-col sm:flex-row gap-3">
                  <Button 
                    onClick={() => navigate('/payment-manual')}
                    className="flex-1"
                    size="lg"
                  >
                    X√°c nh·∫≠n thanh to√°n th·ªß c√¥ng
                  </Button>
                  
                  <Button 
                    variant="outline"
                    onClick={() => navigate('/')}
                    className="flex-1"
                    size="lg"
                  >
                    <Home className="mr-2 h-4 w-4" />
                    V·ªÅ trang ch·ªß
                  </Button>
                </div>
              )}
            </div>

            {success && (
              <div className="text-xs text-gray-500 space-y-1">
                <p>‚Ä¢ B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n trong v√†i ph√∫t</p>
                <p>‚Ä¢ N·∫øu c√≥ v·∫•n ƒë·ªÅ, vui l√≤ng li√™n h·ªá h·ªó tr·ª£</p>
                <p>‚Ä¢ Ch√∫c b·∫°n h·ªçc t·∫≠p hi·ªáu qu·∫£!</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
